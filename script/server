#!/usr/bin/env bash

set -e
[ -z "${DEBUG}" ] || set -x

BASEDIR="$(dirname "$0")/.."
cd "${BASEDIR}"

CYAN=$(echo -en '\033[00;36m')
GREEN=$(echo -en '\033[00;32m')
PURPLE=$(echo -n '\033[0;35m')
YELLOW=$(echo -n '\033[1;33m')
RESTORE=$(echo -en '\033[0m')

function echo_step {
    echo_message ${CYAN}"\n ----- $1 -----"${RESTORE}
}

function echo_message {
    echo -e ${1} >&7
}

function houseKeeping {
    echo_step "Doing some house-keeping before running the script"

    echo_message "Removing any port-forwards that may have been left behind"
    removeAllPortforwards
}

function getFirstPodName {
    local namespace=${1}
    local podName=${2}

    echo $(kubectl --context=docker-for-desktop get pods -n ${namespace} | grep -o ${podName}-[0-9a-zA-Z-]* | head -n1)
}

function awaitDeploymentRollout {
    local deploymentName=${1}
    local namespace=${2}

    echo_message "Waiting for deployment to complete..."
    kubectl --context=docker-for-desktop rollout status deployment/${deploymentName} -n ${namespace}
}

function portforwardForPod {
    local serviceName=${1}
    local podName=${2}
    local podPort=${3}
    local hostPort=${4}
    local namespace=${5}
    local protocol=${6}

    echo_message ${GREEN}"Setting up port-forwarding for ${serviceName} (${protocol}://localhost:${hostPort})"${RESTORE}
    pod=$(getFirstPodName ${namespace} ${podName})
    kubectl --context=docker-for-desktop port-forward ${pod} ${hostPort}:${podPort} -n ${namespace} &
}

function removeAllPortforwards {
    pkill -f kubectl --context=docker-for-desktop port-forward &>/dev/null || true
}

function createNamespace {
  echo_step "Creating namespace: ${1}"

  local namespace=${1}
  kubectl --context=docker-for-desktop create namespace ${namespace} &>/dev/null || true
}

function createSecret {
  local namespace=${1}

  FRM=''
  for file in "${@:3}"; do
    FRM="$FRM --from-file=$file"
  done
  kubectl --context=docker-for-desktop -n ${namespace} create secret generic ${2}${FRM}
}

function deleteSecret {
    local namespace=${1}
    local secretName=${2}
    kubectl --context=docker-for-desktop -n ${namespace} delete secret ${secretName} &>/dev/null || true
}

function createConfigmap {
  local namespace=${1}

  FRM=''
  for literal in "${@:3}"; do
    FRM="$FRM --from-literal=$literal"
  done
  kubectl --context=docker-for-desktop -n ${namespace} create configmap ${2}${FRM}
}

function deleteConfigmap {
    local namespace=${1}
    local configMapName=${2}
    kubectl --context=docker-for-desktop -n ${namespace} delete configmap ${configMapName} &>/dev/null || true
}

function configureSecretsAndConfigMapsForApp {
    echo_step "Configuring Kubernetes secrets & config maps for application"

    local namespace=${1}

    echo_message "Deleting and recreating secrets"
    deleteSecret ${namespace} demo-secret

    echo "somethingSecret" > mySecretFile
    createSecret ${namespace} demo-secret ./mySecretFile
    rm mySecretFile

    echo_message "Deleting and recreating config maps"
    deleteConfigmap ${namespace} demo-config
    createConfigmap ${namespace} demo-config MY_CUSTOM_ENV=123
}

function deployApp {
    echo_step "Deploying application"

    local namespace=${1}

    kubectl --context=docker-for-desktop delete -f ../kube/app.yaml -n ${namespace} &>/dev/null || true
    kubectl --context=docker-for-desktop apply -f ../kube/app.yaml -n ${namespace}

    kubectl --context=docker-for-desktop apply -f ../kube/resource-limits.yaml -n ${namespace}
    kubectl --context=docker-for-desktop apply -f ../kube/resource-quotas.yaml -n ${namespace}

    awaitDeploymentRollout "kubernetes-strta-demo-app" ${namespace}

    portforwardForPod "Kubernetes STRTA Demo" "kubernetes-strta-demo" 8080 8080 ${namespace} "http"
}

function deployKubernetesDashboard {
    echo_step "Deploying Kubernetes dashboard"

    local dashboardConfigFile="https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml"
    kubectl --context=docker-for-desktop delete -f ${dashboardConfigFile} -nkube-system &>/dev/null || true
    kubectl --context=docker-for-desktop apply -f ${dashboardConfigFile} -nkube-system

    awaitDeploymentRollout "kubernetes-dashboard" "kube-system"
    portforwardForPod "Kubernetes Dashboard" "kubernetes-dashboard" 8443 8443 "kube-system" "https"

    echo_message "Here is the TOKEN to use for logging into the dashboard:\n"
    echo_message ${YELLOW}"$(kubectl -n kube-system describe secret default | awk '$1=="token:"{print $2}')"${RESTORE}
}

set -e
cd "${0%/*}"

echo '''
    __ __      __                         __               _______________  _________       ____
   / //_/_  __/ /_  ___  _________  ___  / /____  _____   / ___/_  __/ __ \/_  __/   |     / __ \___  ____ ___  ____
  / ,< / / / / __ \/ _ \/ ___/ __ \/ _ \/ __/ _ \/ ___/   \__ \ / / / /_/ / / / / /| |    / / / / _ \/ __ `__ \/ __ \
 / /| / /_/ / /_/ /  __/ /  / / / /  __/ /_/  __(__  )   ___/ // / / _, _/ / / / ___ |   / /_/ /  __/ / / / / / /_/ /
/_/ |_\__,_/_.___/\___/_/  /_/ /_/\___/\__/\___/____/   /____//_/ /_/ |_| /_/ /_/  |_|  /_____/\___/_/ /_/ /_/\____/

'''

echo "Local Environment Setup using Docker for Mac with Kubernetes"

#https://stackoverflow.com/questions/30717358/bash-output-limited-to-echo-only
exec 7>&1
exec > /dev/null 2>&1

function usage {
    echo_step "Usage"

    echo_message "-d\t\tDeploy application using a locally built Docker image"
    echo_message "-v\t\tEnable verbose mode"
}

if [ $# -eq 0 ]; then
  usage
  exit 1
fi

while getopts ":dv" opt; do
  case $opt in
    d)
      ;;
    v)
      exec >&7
      exec 2>&7
      ;;
    *)
      usage
      exit 1
      ;;
  esac
done

houseKeeping

deployKubernetesDashboard

createNamespace "kube-strta-demo"
configureSecretsAndConfigMapsForApp "kube-strta-demo"
deployApp "kube-strta-demo"

echo_message ${PURPLE}"Press <Enter> to kill port-forwarding and then you can shutdown Docker for Mac with Kubernetes..."${RESTORE}
read -p ""
removeAllPortforwards

echo_message "Port-forwarding killed - you can now shutdown Docker for Mac with Kubernetes"
echo_message "Note: the application is still running in Kubernetes just that its's not accessible - please delete 'kube-strta-demo' namespace to stop it!"
echo_message ${YELLOW}"kubectl --context=docker-for-desktop delete namespace kube-strta-demo"${RESTORE}

echo_message "Complete"
